// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// <auto-generated />

using System;
using System.Net;
using System.Threading.Tasks;
using System.Text.Json;
using System.Text.Json.Serialization;
using Microsoft.AspNetCore.Mvc;
using DiscDog.Service.Models;
using DiscDog.Service;

namespace DiscDog.Service.Controllers
{
    [ApiController]
    public abstract partial class dogControllerBase : ControllerBase
    {

        internal abstract Idog dogImpl { get; }

        ///<summary>
        /// Gets an instance of the resource.
        ///</summary>
        [HttpGet]
        [Route("/dog/{id}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Dog))]
        public virtual async Task<IActionResult> Get(string id)
        {
            var result = await dogImpl.GetAsync(id);
            return Ok(result);
        }

        ///<summary>
        /// Updates an existing instance of the resource.
        ///</summary>
        [HttpPatch]
        [Route("/dog/{id}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Dog))]
        public virtual async Task<IActionResult> Update(string id, DogUpdate body)
        {
            var result = await dogImpl.UpdateAsync(id, body);
            return Ok(result);
        }

        ///<summary>
        /// Deletes an existing instance of the resource.
        ///</summary>
        [HttpDelete]
        [Route("/dog/{id}")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(void))]
        public virtual async Task<IActionResult> Delete(string id)
        {
            await dogImpl.DeleteAsync(id);
            return Ok();
        }

        ///<summary>
        /// Creates a new instance of the resource.
        ///</summary>
        [HttpPost]
        [Route("/dog")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(Dog))]
        [ProducesResponseType((int)HttpStatusCode.Created, Type = typeof(Dog))]
        public virtual async Task<IActionResult> Create(DogCreate body)
        {
            var result = await dogImpl.CreateAsync(body);
            return Ok(result);
        }

        ///<summary>
        /// Lists all instances of the resource.
        ///</summary>
        [HttpGet]
        [Route("/dog")]
        [ProducesResponseType((int)HttpStatusCode.OK, Type = typeof(DogCollectionWithNextLink))]
        public virtual async Task<IActionResult> List()
        {
            var result = await dogImpl.ListAsync();
            return Ok(result);
        }

    }
}
